<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '90c1e1e8e7b6dfe4bb9f3d4af210711a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"diag_getImages_Image_Tpl","description":"This is a diagnostic example chunk for getImages.\\nIt shows all the available tags and what they contain.","editor_type":0,"category":0,"cache_type":0,"snippet":"This is a diagnostic example chunk for getImages. <br \\/>\\nIt shows all the available tags and what they contain. <br \\/> <br \\/>\\n\\n[[+imgLink]] . . . = the \\"imgLink\\" tag for getting the full link to the image <br \\/><br \\/>\\n[[+imgName]] . . . = the \\"imgName\\" tag for getting the filename, without extension <br \\/><br \\/>\\n[[+path]] . . . = the \\"path\\" tag for getting the path to the image without filename <br \\/><br \\/>\\n[[+pPath]] . . . = the \\"pPath\\" tag for getting the path without the folder containing the image file <br \\/><br \\/>\\n[[+tPath]] . . . = the \\"tPath\\" tag for getting the path without the root folder <br \\/><br \\/>\\n[[+parent]] . . . = the \\"parent\\" tag for getting the parent folder of the folder containing the image file <br \\/><br \\/>\\n[[+imgFile]] . . . = the \\"imgFile\\" tag for getting the filename with extension <br \\/><br \\/>\\n[[+folder]] . . . = the \\"folder\\" tag for getting the file\'s folder <br \\/><br \\/>\\n[[+imgCamera]] . . . = the \\"imgCamera\\" tag for getting the exif camera data <br \\/><br \\/>\\n[[+imgDate]] . . . = the \\"imgDate\\" tag for getting the exif date <br \\/><br \\/>\\n[[+width]] . . . = the \\"width\\" tag for getting the width setting <br \\/><br \\/>\\n[[+height]] . . . = the \\"height\\" tag for getting the height setting <br \\/><br \\/>\\n[[+border]] . . . = the \\"border\\" tag for getting the border atribute <br \\/><br \\/>\\n[[+class]] . . . = the \\"class\\" tag for getting the class atribute <br \\/><br \\/>\\n[[+pageClass]] . . . = the \\"pageClass\\" tag for getting the page class atribute <br \\/><br \\/>\\n[[+infoClass]] . . . = the \\"infoClass\\" tag for getting the info class atribute <br \\/><br \\/>\\n[[+exifClass]] . . . = the \\"exifClass\\" tag for getting the exif class atribute <br \\/><br \\/>\\n[[+id]] . . . = the \\"id\\" tag for getting the id <br \\/><br \\/>\\n[[+pageId]] . . . = the \\"pageId\\" tag for getting the page id <br \\/><br \\/>\\n[[+infoId]] . . . = the \\"infoId\\" tag for getting the info id <br \\/><br \\/>\\n[[+exifId]] . . . = the \\"exifId\\" tag for getting the exif id <br \\/><br \\/>\\n[[+total]] . . . = the \\"total\\" tag for getting the total count <br \\/>\\n<img src=\\"[[+imgLink]]\\" \\/>\\n<hr \\/><br \\/>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"This is a diagnostic example chunk for getImages. <br \\/>\\nIt shows all the available tags and what they contain. <br \\/> <br \\/>\\n\\n[[+imgLink]] . . . = the \\"imgLink\\" tag for getting the full link to the image <br \\/><br \\/>\\n[[+imgName]] . . . = the \\"imgName\\" tag for getting the filename, without extension <br \\/><br \\/>\\n[[+path]] . . . = the \\"path\\" tag for getting the path to the image without filename <br \\/><br \\/>\\n[[+pPath]] . . . = the \\"pPath\\" tag for getting the path without the folder containing the image file <br \\/><br \\/>\\n[[+tPath]] . . . = the \\"tPath\\" tag for getting the path without the root folder <br \\/><br \\/>\\n[[+parent]] . . . = the \\"parent\\" tag for getting the parent folder of the folder containing the image file <br \\/><br \\/>\\n[[+imgFile]] . . . = the \\"imgFile\\" tag for getting the filename with extension <br \\/><br \\/>\\n[[+folder]] . . . = the \\"folder\\" tag for getting the file\'s folder <br \\/><br \\/>\\n[[+imgCamera]] . . . = the \\"imgCamera\\" tag for getting the exif camera data <br \\/><br \\/>\\n[[+imgDate]] . . . = the \\"imgDate\\" tag for getting the exif date <br \\/><br \\/>\\n[[+width]] . . . = the \\"width\\" tag for getting the width setting <br \\/><br \\/>\\n[[+height]] . . . = the \\"height\\" tag for getting the height setting <br \\/><br \\/>\\n[[+border]] . . . = the \\"border\\" tag for getting the border atribute <br \\/><br \\/>\\n[[+class]] . . . = the \\"class\\" tag for getting the class atribute <br \\/><br \\/>\\n[[+pageClass]] . . . = the \\"pageClass\\" tag for getting the page class atribute <br \\/><br \\/>\\n[[+infoClass]] . . . = the \\"infoClass\\" tag for getting the info class atribute <br \\/><br \\/>\\n[[+exifClass]] . . . = the \\"exifClass\\" tag for getting the exif class atribute <br \\/><br \\/>\\n[[+id]] . . . = the \\"id\\" tag for getting the id <br \\/><br \\/>\\n[[+pageId]] . . . = the \\"pageId\\" tag for getting the page id <br \\/><br \\/>\\n[[+infoId]] . . . = the \\"infoId\\" tag for getting the info id <br \\/><br \\/>\\n[[+exifId]] . . . = the \\"exifId\\" tag for getting the exif id <br \\/><br \\/>\\n[[+total]] . . . = the \\"total\\" tag for getting the total count <br \\/>\\n<img src=\\"[[+imgLink]]\\" \\/>\\n<hr \\/><br \\/>"}',
        'guid' => '05c739ce69a6ab4a0c186c6a38304373',
        'native_key' => 1,
        'signature' => '773967b4a9feada39d42f2b4face0f06',
      ),
      'd2d3e3d42bba1dbe393c85fe872a314a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"example2_getImages_Image_Tpl","description":"This is another example chunk for getImages to display an image. It adds a bit of styling.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is an example chunk for getImages to display an image with some basic styling.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<\\/div>\\n","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<!-- This is an example chunk for getImages to display an image with some basic styling.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<\\/div>\\n"}',
        'guid' => 'a3b97a447d0d2329a0e717d2419ae37c',
        'native_key' => 2,
        'signature' => '03603915efb3b16a6a8ddc5bb84ed019',
      ),
      'd0ad9b9e597bfd60f5166c3bc3aba34a' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"example2_getImages_Page_Tpl","description":"This is an example chunk for getImages using getPage for pagination of images and monthName to convert numbered folder names to month names.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is an example chunk for getImages using getPage for pagination of images and monthName to convert numbered folder names to month names. \\nThe tags it uses are:\\n+folder - name of the folder (by passing this to monthName we can convert folders named 01-12 to either Jan-Dec or January-December. This is useful because if you simply named the folders using the month names they would appear in alphabetical order in your menu.\\n+total - A placeholder for the image count in you folder.\\n+page - The placeholder for your current page (from getPage)\\n+pageCount - The placeholder for the total number of pages. (from getPage)\\n+pageClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+photos - The placeholder for images from your image template chunk.\\n-->\\n\\n<h1 class=\'text-center\'>[[!monthName? &mn_Folder=`x[[+folder]]`]] Photos<\\/h1>\\n<!--calls monthName snippet to change numerical folder name to proper name-->\\n<h4 class=\'text-center\'>[[+total]] Photos - Page [[+page]] of [[+pageCount]]<\\/h4>\\n\\n<div class=\\"[[+pageClass]]\\">\\n[[+photos]]\\n<\\/div>","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<!-- This is an example chunk for getImages using getPage for pagination of images and monthName to convert numbered folder names to month names. \\nThe tags it uses are:\\n+folder - name of the folder (by passing this to monthName we can convert folders named 01-12 to either Jan-Dec or January-December. This is useful because if you simply named the folders using the month names they would appear in alphabetical order in your menu.\\n+total - A placeholder for the image count in you folder.\\n+page - The placeholder for your current page (from getPage)\\n+pageCount - The placeholder for the total number of pages. (from getPage)\\n+pageClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+photos - The placeholder for images from your image template chunk.\\n-->\\n\\n<h1 class=\'text-center\'>[[!monthName? &mn_Folder=`x[[+folder]]`]] Photos<\\/h1>\\n<!--calls monthName snippet to change numerical folder name to proper name-->\\n<h4 class=\'text-center\'>[[+total]] Photos - Page [[+page]] of [[+pageCount]]<\\/h4>\\n\\n<div class=\\"[[+pageClass]]\\">\\n[[+photos]]\\n<\\/div>"}',
        'guid' => '03596d2c0206c3aac1be8839bce8f9cf',
        'native_key' => 3,
        'signature' => '0b88c92c4c4afe1d94addda95ada10f0',
      ),
      '3136cf9e15d64df852adaf4a20a60015' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"example_getImages_Child_Tpl","description":"Example template for getFoldersList when used with getImages. This chunk is for child directories. Remember to change the 2 to your correct ImagePage ID","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is a basic example chunk for getFolders when used with getImages. \\nThe tags it uses are:\\n+fpath - The placeholder for the path to the folder.\\n+folder - The placeholder for the folder name.\\nMake sure the document ID (2) is changed to the ID of your document.\\n-->\\n\\n<li>\\n<a href=\\"[[~2?&folder=`[[+fpath]]`]]\\"  title=\\"[[+folder]] Photos\\">[[+folder]] Photos<\\/a>\\n<\\/li>\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<!-- This is a basic example chunk for getFolders when used with getImages. \\nThe tags it uses are:\\n+fpath - The placeholder for the path to the folder.\\n+folder - The placeholder for the folder name.\\nMake sure the document ID (2) is changed to the ID of your document.\\n-->\\n\\n<li>\\n<a href=\\"[[~2?&folder=`[[+fpath]]`]]\\"  title=\\"[[+folder]] Photos\\">[[+folder]] Photos<\\/a>\\n<\\/li>\\n"}',
        'guid' => 'b67a032a3c5d9f6e87682d5a7ddfc550',
        'native_key' => 4,
        'signature' => 'e87bbc6bf835254826013654c8a1e255',
      ),
      '962e6f10acdabbd413e51a1c2ca8d744' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":5,"source":0,"property_preprocess":0,"name":"example_getImages_ImageDate_Tpl","description":"This is an example chunk for getImages to display an image with Name and Date.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is an example chunk for getImages to display an image with Name and Date.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\n+infoClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgName - The placeholder to set the image name.\\n+exifClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgDate - The placeholder to set the image exif date data.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<div class=\\"[[+infoClass]]\\">\\n[[+imgName]]\\n<div class=\\"[[+exifClass]]\\">\\nDate\\/Time - [[+imgDate]]\\n<\\/div>\\n<\\/div>\\n<\\/div>\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<!-- This is an example chunk for getImages to display an image with Name and Date.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\n+infoClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgName - The placeholder to set the image name.\\n+exifClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgDate - The placeholder to set the image exif date data.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<div class=\\"[[+infoClass]]\\">\\n[[+imgName]]\\n<div class=\\"[[+exifClass]]\\">\\nDate\\/Time - [[+imgDate]]\\n<\\/div>\\n<\\/div>\\n<\\/div>\\n"}',
        'guid' => '323edbeed67f5745d138296c09b8ea72',
        'native_key' => 5,
        'signature' => 'a9b9f7c775e4d687741b66fdd53f2c59',
      ),
      'eaf05795812432ab18f6cdf4f93000f9' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":6,"source":0,"property_preprocess":0,"name":"example_getImages_ImageModel_Tpl","description":"This is an example chunk for getImages to display an image with Name, Date, and Camera Model.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is an example chunk for getImages to display an image with Name, Date, and Camera Model.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\n+infoClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgName - The placeholder to set the image name.\\n+exifClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgCamera - The placeholder to set the image exif model data.\\n+imgDate - The placeholder to set the image exif date data.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<div class=\\"[[+infoClass]]\\">\\n[[+imgName]]\\n<div class=\\"[[+exifClass]]\\">\\nCamera - [[+imgCamera]]\\n<br \\/>\\nDate\\/Time - [[+imgDate]]\\n<\\/div>\\n<\\/div>\\n<\\/div>\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<!-- This is an example chunk for getImages to display an image with Name, Date, and Camera Model.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\n+infoClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgName - The placeholder to set the image name.\\n+exifClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgCamera - The placeholder to set the image exif model data.\\n+imgDate - The placeholder to set the image exif date data.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<div class=\\"[[+infoClass]]\\">\\n[[+imgName]]\\n<div class=\\"[[+exifClass]]\\">\\nCamera - [[+imgCamera]]\\n<br \\/>\\nDate\\/Time - [[+imgDate]]\\n<\\/div>\\n<\\/div>\\n<\\/div>\\n"}',
        'guid' => '92ffe30a3a76e3a54d6f5de984ae4a18',
        'native_key' => 6,
        'signature' => '7b958be9a532a956429e469b0e24db2a',
      ),
      '43fd1f7741e399a3ec69fb1f987d3974' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":7,"source":0,"property_preprocess":0,"name":"example_getImages_ImageName_Tpl","description":"This is an example chunk for getImages to display an image with Name.  ","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is an example chunk for getImages to display an image with Name.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\n+infoClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgName - The placeholder to set the image name.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<div class=\\"[[+infoClass]]\\">\\n[[+imgName]]\\n<\\/div>\\n<\\/div>\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<!-- This is an example chunk for getImages to display an image with Name.  \\nThe tags it uses are:\\n+class - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgLink - The placeholder for the image link.\\n+infoClass - A placeholder to add a class to your div for styling. defaults to \\"\\"\\n+imgName - The placeholder to set the image name.\\nBy using the great pThumb snippit by jgrant I am able to have the page display thumbnails from a cache \\nthat it creates on the fly. The link still points to the full size image. (see pThumb documentation for usage)\\n-->\\n\\n<div class=\\"[[+class]]\\">\\n<a href=\\"[[+imgLink]]\\" target=\\"_blank\\">\\n<img src=\\"[[+imgLink:pThumb=`w=250&h=188&f=png&bg=00f&far=BC&zc=1`]]\\" alt=\\"[[+imgLink]]\\" \\/>\\n<\\/a>\\n<div class=\\"[[+infoClass]]\\">\\n[[+imgName]]\\n<\\/div>\\n<\\/div>\\n"}',
        'guid' => 'a97b02a7118662fe45f837be7fb50891',
        'native_key' => 7,
        'signature' => 'abed51594500e67e76e33caebb60d90b',
      ),
      'ca1d4af29c63c052100cc904665d75ba' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":8,"source":0,"property_preprocess":0,"name":"example_getImages_Image_Tpl","description":"This is an example chunk for getImages to display an image.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is a basic example chunk for getImages. \\nThe tag it uses is:\\n+imgLink - The placeholder for the image link.\\n-->\\n\\n<img src=\\"[[+imgLink]]\\" \\/><!--placeholder for link to image -->","locked":0,"properties":null,"static":0,"static_file":"","content":"<!-- This is a basic example chunk for getImages. \\nThe tag it uses is:\\n+imgLink - The placeholder for the image link.\\n-->\\n\\n<img src=\\"[[+imgLink]]\\" \\/><!--placeholder for link to image -->"}',
        'guid' => 'd83ca463f32623974a2f4cccbbaf03a4',
        'native_key' => 8,
        'signature' => 'e280ec342621b3b677d7bd54615fac13',
      ),
      '5f9180d618a3274cc987f7aee4988692' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":9,"source":0,"property_preprocess":0,"name":"example_getImages_Page_Tpl","description":"This is a basic example chunk for getImages.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is a basic example chunk for getImages. \\nThe tag it uses is:\\n+photos - The placeholder for images from your image template chunk.\\n-->\\n\\n[[+photos]]","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"<!-- This is a basic example chunk for getImages. \\nThe tag it uses is:\\n+photos - The placeholder for images from your image template chunk.\\n-->\\n\\n[[+photos]]"}',
        'guid' => '334121dcadf9d0cd6d189a0c6f6ad8ff',
        'native_key' => 9,
        'signature' => '8036f901ec66330f8757d4f753a5ff36',
      ),
      '514d858cfb4885633df919d9bc2bc7f2' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":10,"source":0,"property_preprocess":0,"name":"example_getImages_Parent_Tpl","description":"Example template for getFoldersList when used with getImages. This chunk is for parent directories.","editor_type":0,"category":0,"cache_type":0,"snippet":"<!-- This is a basic example chunk for getFolders when used with getImages. The tags it uses are:\\n+folder - The placeholder for the folder name.\\n+children - The placeholder to retrieve data from the child template chunk.\\n-->\\n\\n<li>\\n<a href=\\"[[~[[*id]]]]\\"  title=\\"[[+folder]] Photos\\">[[+folder]] Photos<\\/a>\\n<ul>\\n[[+children]]\\n<\\/ul>\\n<\\/li>\\n","locked":0,"properties":null,"static":0,"static_file":"","content":"<!-- This is a basic example chunk for getFolders when used with getImages. The tags it uses are:\\n+folder - The placeholder for the folder name.\\n+children - The placeholder to retrieve data from the child template chunk.\\n-->\\n\\n<li>\\n<a href=\\"[[~[[*id]]]]\\"  title=\\"[[+folder]] Photos\\">[[+folder]] Photos<\\/a>\\n<ul>\\n[[+children]]\\n<\\/ul>\\n<\\/li>\\n"}',
        'guid' => 'a0a20e52ca838334e352945b756e3be8',
        'native_key' => 10,
        'signature' => 'f41a40c28f59ead70ea67304afdc459a',
      ),
    ),
    'Snippets' => 
    array (
      '8cce51b2efcfb4dd33b066845d2d2b28' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"getImages","description":"This Snippet retrieves image files from a directory, processes them through template chunks and returns the results.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/*\\n * getImages\\n *\\n * DESCRIPTION\\n *\\n * This Snippet retrieves image files from a directory, processes them through \\n * template chunks and returns the resulting gallery.\\n *\\n * PARAMETERS:\\n *\\n * &getImages_Folder string - The name of the image folder to search. optional. Default: assets\\/photos\\n * &getImages_Ext string - The extension of the images. optional. Default: jpg\\n * &getImages_Sort string - the way you would like the images sorted. optional Default: filemtime\\n * &getImages_Image_Tpl string - The name of a Chunk used to format Images. optional. Default: getImages_Image_Tpl\\n * &getImages_Page_Tpl string - The name of a Chunk used to format the page. optional. Default: getImages_Page_Tpl\\n * &getImages_Width integer - A number representing the width images to return. optional. Default: 150\\n * &getImages_Height integer - A number representing the height images to return. optional. Default: 100\\n * &getImages_Border integer - A number representing the border width. optional. Default: 0\\n * &getImages_Class string - A class name to pass. optional. Default: \'\'\\n * &getImages_PageClass string - A class name to pass. optional. Default: \'\'\\n * &getImages_InfoClass string - A class name to pass. optional. Default: \'\'\\n * &getImages_ExifClass string - A class name to pass. optional. Default: \'\'\\n * &getImages_Id string - An id name to pass. optional. Default: \'\'\\n * &getImages_PageId string - An id name to pass. optional. Default: \'\'\\n * &getImages_InfoId string - An id name to pass. optional. Default: \'\'\\n * &getImages_ExifId string - An id name to pass. optional. Default: \'\'\\n * &getImages_Paging boolean - 1 to split images between pages. 0 for no split. optional. Default: 1\\n * &getImages_Random boolean - 1 to sort results randomly. 0 for no 1 for less. optional. Default: 0\\n * &limit string - A number representing the number of images to display per page (see getPage). optional. Default: 10\\n * &pageLimit string - A number representing the number of page links to display (see getPage). optional. Default: 5\\n *\\n * version 2.4.0\\n * author Jerry Mercer (ultravision.net)\\n *\\n * USAGE:\\n *\\n * [[!getImages? \\n * &getImages_Folder=`assets\\/photos` \\n * &getImages_Ext =`jpg,gif,png,JPG,GIF,PNG`\\n * &getImages_Sort = `filemtime`\\n * &getImages_Image_Tpl =`getImages_Image_Tpl`\\n * &getImages_Page_Tpl =`getImages_Page_Tpl`\\n * &getImages_Width =`150`\\n * &getImages_Heigth=`100`\\n * &getImages_Border=`2`\\n * &getImages_Class =`imgClass`\\n * &getImages_PageClass =`section`\\n * &getImages_InfoClass =`info`\\n * &getImages_ExifClass =`exif`\\n * &getImages_Id =`imgId`\\n * &getImages_PageId =`section`\\n * &getImages_InfoId =`info`\\n * &getImages_ExifId =`exif`\\n * &getImages_Paging =`1`\\n * &getImages_Random =`1`\\n * &limit =`6`\\n * &pageLimit=`3`\\n * ]]\\n *\\n *\\/\\n\\n\\/***** SET VARIABLES *****\\/\\n\\/\\/ $folder = isset($_GET[\'folder\']) ? $_GET[\'folder\'] : \'\'; \\/\\/ use to get folder from URL\\n$folder = $modx->getOption(\'getImages_Folder\', $scriptProperties, \'assets\\/photos\'); \\/\\/ use to get default folder, or from parameters\\n$ext = $modx->getOption(\'getImages_Ext\', $scriptProperties, \'jpg\'); \\/\\/ What extension(s) do we use\\n$fileSort = $modx->getOption(\'getImages_Sort\', $scriptProperties, \'filemtime\'); \\/\\/ What to sort the images by\\n$image_tpl = $modx->getOption(\'getImages_Image_Tpl\', $scriptProperties, \'getImages_Image_Tpl\'); \\/\\/ template for each image\\n$page_tpl = $modx->getOption(\'getImages_Page_Tpl\', $scriptProperties, \'getImages_Page_Tpl\'); \\/\\/ template for completed page \\n$width = $modx->getOption(\'getImages_Width\', $scriptProperties, 300); \\/\\/ Width to use\\n$height = $modx->getOption(\'getImages_Height\', $scriptProperties, 225);\\/\\/ Height to use\\n$border = $modx->getOption(\'getImages_Border\', $scriptProperties, 0); \\/\\/ Border to use\\n$class = $modx->getOption(\'getImages_Class\', $scriptProperties, \'\'); \\/\\/ class name\\n$pageClass = $modx->getOption(\'getImages_PageClass\', $scriptProperties, \'\'); \\/\\/ class name\\n$infoClass = $modx->getOption(\'getImages_InfoClass\', $scriptProperties, \'\'); \\/\\/ class name\\n$exifClass = $modx->getOption(\'getImages_ExifClass\', $scriptProperties, \'\'); \\/\\/ class name\\n$id = $modx->getOption(\'getImages_Id\', $scriptProperties, \'\'); \\/\\/ id name\\n$pageId = $modx->getOption(\'getImages_PageId\', $scriptProperties, \'\'); \\/\\/ id name\\n$infoId = $modx->getOption(\'getImages_InfoId\', $scriptProperties, \'\'); \\/\\/ id name\\n$exifId = $modx->getOption(\'getImages_ExifId\', $scriptProperties, \'\'); \\/\\/ id name\\n$paging = $modx->getOption(\'getImages_Paging\', $scriptProperties, 1); \\/\\/ Do we use paging\\n$rSort = $modx->getOption(\'getImages_Random\', $scriptProperties, 0); \\/\\/ Do we use random sorting\\n\\n$fPath = \'\'; \\/\\/ initialize full path to image variable\\n$imgFile = \'\'; \\/\\/ initialize full file name of image variable\\n$imgName = \'\'; \\/\\/ initialize image name variable\\n$path = \'\'; \\/\\/ initialize fPath less file name variable\\n$pPath = \'\'; \\/\\/ initialize path to parent folder variable\\n$tPath = \'\'; \\/\\/ initialize path strip-parent folder variable\\n$parent = \'\'; \\/\\/ initialize parent folder variable\\n$fHTML = \'\'; \\/\\/ initialize formatted HTML from template chunk variable\\n$c = 1; \\/\\/ initialize counter for foreach loop variable\\n\\n\\/***** CREATE IMAGE ARRAY *****\\/\\n$allImages = glob($folder.\'\\/*.{\'.$ext.\'}\', GLOB_BRACE); \\/\\/ get images($images) from image folder($folder)\\narray_multisort(array_map($fileSort, $allImages), SORT_DESC, $allImages); \\/\\/ sort the array \\n$tot = count($allImages);\\t        \\/\\/ counter for all images in folder\\n\\nif ($paging > 0) {\\n\\t$images = array_slice($allImages, $offset, $limit);\\/\\/ Type your code here\\n}\\nelse {\\n\\t$images = $allImages;\\n}\\n\\nif ($rSort > 0) {\\n\\tshuffle($images);\\n}\\n\\n\\/***** CREATE THE IMAGE SECTION FOR OUR PAGE *****\\/\\nforeach ($images as $image) \\/\\/ loop through the images array\\n{\\n\\t$modx->setPlaceholder(\'id\', $id); \\/\\/ set id place-holder for use in template chunk\\n\\t$modx->setPlaceholder(\'count\', $c); \\/\\/ set count place-holder\\n\\t$fPath = $image; \\/\\/ set full path to image\\n\\t$imgFile = basename($fPath); \\/\\/ strip to just image file name\\n\\t$imgName = rtrim($imgFile, \\".\\".substr(strrchr($imgFile, \\".\\"), 1)); \\/\\/ strip extension\\n\\t$path = preg_replace(\'\\/\'. preg_quote($imgFile, \'\\/\') . \'$\\/\', \'\', $fPath); \\/\\/ get path without file name\\t\\n\\t$fold = basename($path); \\/\\/ strip to get image folder\\n\\t$pPath = preg_replace(\'\\/\'. preg_quote($fold, \'\\/\') . \'\\\\\\/$\\/\', \'\', $path); \\/\\/ get path to parent folder \\n\\t$tPath = substr($path, strpos($path, \'\\/\') + 1); \\/\\/get path without root folder\\n\\t$parent = basename($pPath); \\/\\/ strip to get just parent folder\\n\\t$exif_data = exif_read_data ($fPath ,\'IFD0\' ,0 ); \\/\\/ read the exif data from the image\\n\\t$modx->setPlaceholder(\'imgLink\', $fPath); \\/\\/ set imgLink place-holder\\n\\t$modx->setPlaceholder(\'imgName\', $imgName); \\/\\/ set imgName place-holder\\n\\t$modx->setPlaceholder(\'path\', $path); \\/\\/ set path place-holder\\n\\t$modx->setPlaceholder(\'pPath\', $pPath); \\/\\/ set parent path place-holder\\n\\t$modx->setPlaceholder(\'tPath\', $tPath); \\/\\/ set tPath place-holder\\n\\t$modx->setPlaceholder(\'parent\', $parent); \\/\\/ set parent place-holder\\n\\t$modx->setPlaceholder(\'imgFile\', $imgFile); \\/\\/ set imgFile place-holder\\n\\t$modx->setPlaceholder(\'folder\', $fold); \\/\\/ set folder place-holder\\n\\t$modx->setPlaceholder(\'imgCamera\', $exif_data[\'Model\']); \\/\\/ set imgCamera place-holder\\n\\t$modx->setPlaceholder(\'imgDate\', $exif_data[\'DateTime\']); \\/\\/ set imgDate place-holder\\n\\t$fHTML = $modx->getChunk($image_tpl); \\/\\/call the formatting chunk\\n\\t$photos .= $fHTML; \\/\\/ insert completed image sections into a string\\n\\t$c = $c+1; \\/\\/ increment the counter\\t\\n}\\n\\n\\/***** COMPLETE THE PAGE *****\\/\\n$modx->setPlaceholder(\'width\', $width); \\/\\/ set width place-holder\\n$modx->setPlaceholder(\'height\', $height); \\/\\/ set height place-holder\\n$modx->setPlaceholder(\'border\', $border); \\/\\/ set border place-holder\\n$modx->setPlaceholder(\'class\', $class); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'pageClass\', $pageClass); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'infoClass\', $infoClass); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'exifClass\', $exifClass); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'id\', $id); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'pageId\', $pageId); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'infoId\', $infoId); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'exifId\', $exifId); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'total\', $tot); \\/\\/ set total place-holder\\n$modx->setPlaceholder(\'photos\', $photos); \\/\\/ set photos place-holder\\n$page = $modx->getChunk($page_tpl); \\/\\/call the formatting chunk and fill with the results\\n\\n\\/***** RETURN COMPLETED PAGE *****\\/\\nreturn $page;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*\\n * getImages\\n *\\n * DESCRIPTION\\n *\\n * This Snippet retrieves image files from a directory, processes them through \\n * template chunks and returns the resulting gallery.\\n *\\n * PARAMETERS:\\n *\\n * &getImages_Folder string - The name of the image folder to search. optional. Default: assets\\/photos\\n * &getImages_Ext string - The extension of the images. optional. Default: jpg\\n * &getImages_Sort string - the way you would like the images sorted. optional Default: filemtime\\n * &getImages_Image_Tpl string - The name of a Chunk used to format Images. optional. Default: getImages_Image_Tpl\\n * &getImages_Page_Tpl string - The name of a Chunk used to format the page. optional. Default: getImages_Page_Tpl\\n * &getImages_Width integer - A number representing the width images to return. optional. Default: 150\\n * &getImages_Height integer - A number representing the height images to return. optional. Default: 100\\n * &getImages_Border integer - A number representing the border width. optional. Default: 0\\n * &getImages_Class string - A class name to pass. optional. Default: \'\'\\n * &getImages_PageClass string - A class name to pass. optional. Default: \'\'\\n * &getImages_InfoClass string - A class name to pass. optional. Default: \'\'\\n * &getImages_ExifClass string - A class name to pass. optional. Default: \'\'\\n * &getImages_Id string - An id name to pass. optional. Default: \'\'\\n * &getImages_PageId string - An id name to pass. optional. Default: \'\'\\n * &getImages_InfoId string - An id name to pass. optional. Default: \'\'\\n * &getImages_ExifId string - An id name to pass. optional. Default: \'\'\\n * &getImages_Paging boolean - 1 to split images between pages. 0 for no split. optional. Default: 1\\n * &getImages_Random boolean - 1 to sort results randomly. 0 for no 1 for less. optional. Default: 0\\n * &limit string - A number representing the number of images to display per page (see getPage). optional. Default: 10\\n * &pageLimit string - A number representing the number of page links to display (see getPage). optional. Default: 5\\n *\\n * version 2.4.0\\n * author Jerry Mercer (ultravision.net)\\n *\\n * USAGE:\\n *\\n * [[!getImages? \\n * &getImages_Folder=`assets\\/photos` \\n * &getImages_Ext =`jpg,gif,png,JPG,GIF,PNG`\\n * &getImages_Sort = `filemtime`\\n * &getImages_Image_Tpl =`getImages_Image_Tpl`\\n * &getImages_Page_Tpl =`getImages_Page_Tpl`\\n * &getImages_Width =`150`\\n * &getImages_Heigth=`100`\\n * &getImages_Border=`2`\\n * &getImages_Class =`imgClass`\\n * &getImages_PageClass =`section`\\n * &getImages_InfoClass =`info`\\n * &getImages_ExifClass =`exif`\\n * &getImages_Id =`imgId`\\n * &getImages_PageId =`section`\\n * &getImages_InfoId =`info`\\n * &getImages_ExifId =`exif`\\n * &getImages_Paging =`1`\\n * &getImages_Random =`1`\\n * &limit =`6`\\n * &pageLimit=`3`\\n * ]]\\n *\\n *\\/\\n\\n\\/***** SET VARIABLES *****\\/\\n\\/\\/ $folder = isset($_GET[\'folder\']) ? $_GET[\'folder\'] : \'\'; \\/\\/ use to get folder from URL\\n$folder = $modx->getOption(\'getImages_Folder\', $scriptProperties, \'assets\\/photos\'); \\/\\/ use to get default folder, or from parameters\\n$ext = $modx->getOption(\'getImages_Ext\', $scriptProperties, \'jpg\'); \\/\\/ What extension(s) do we use\\n$fileSort = $modx->getOption(\'getImages_Sort\', $scriptProperties, \'filemtime\'); \\/\\/ What to sort the images by\\n$image_tpl = $modx->getOption(\'getImages_Image_Tpl\', $scriptProperties, \'getImages_Image_Tpl\'); \\/\\/ template for each image\\n$page_tpl = $modx->getOption(\'getImages_Page_Tpl\', $scriptProperties, \'getImages_Page_Tpl\'); \\/\\/ template for completed page \\n$width = $modx->getOption(\'getImages_Width\', $scriptProperties, 300); \\/\\/ Width to use\\n$height = $modx->getOption(\'getImages_Height\', $scriptProperties, 225);\\/\\/ Height to use\\n$border = $modx->getOption(\'getImages_Border\', $scriptProperties, 0); \\/\\/ Border to use\\n$class = $modx->getOption(\'getImages_Class\', $scriptProperties, \'\'); \\/\\/ class name\\n$pageClass = $modx->getOption(\'getImages_PageClass\', $scriptProperties, \'\'); \\/\\/ class name\\n$infoClass = $modx->getOption(\'getImages_InfoClass\', $scriptProperties, \'\'); \\/\\/ class name\\n$exifClass = $modx->getOption(\'getImages_ExifClass\', $scriptProperties, \'\'); \\/\\/ class name\\n$id = $modx->getOption(\'getImages_Id\', $scriptProperties, \'\'); \\/\\/ id name\\n$pageId = $modx->getOption(\'getImages_PageId\', $scriptProperties, \'\'); \\/\\/ id name\\n$infoId = $modx->getOption(\'getImages_InfoId\', $scriptProperties, \'\'); \\/\\/ id name\\n$exifId = $modx->getOption(\'getImages_ExifId\', $scriptProperties, \'\'); \\/\\/ id name\\n$paging = $modx->getOption(\'getImages_Paging\', $scriptProperties, 1); \\/\\/ Do we use paging\\n$rSort = $modx->getOption(\'getImages_Random\', $scriptProperties, 0); \\/\\/ Do we use random sorting\\n\\n$fPath = \'\'; \\/\\/ initialize full path to image variable\\n$imgFile = \'\'; \\/\\/ initialize full file name of image variable\\n$imgName = \'\'; \\/\\/ initialize image name variable\\n$path = \'\'; \\/\\/ initialize fPath less file name variable\\n$pPath = \'\'; \\/\\/ initialize path to parent folder variable\\n$tPath = \'\'; \\/\\/ initialize path strip-parent folder variable\\n$parent = \'\'; \\/\\/ initialize parent folder variable\\n$fHTML = \'\'; \\/\\/ initialize formatted HTML from template chunk variable\\n$c = 1; \\/\\/ initialize counter for foreach loop variable\\n\\n\\/***** CREATE IMAGE ARRAY *****\\/\\n$allImages = glob($folder.\'\\/*.{\'.$ext.\'}\', GLOB_BRACE); \\/\\/ get images($images) from image folder($folder)\\narray_multisort(array_map($fileSort, $allImages), SORT_DESC, $allImages); \\/\\/ sort the array \\n$tot = count($allImages);\\t        \\/\\/ counter for all images in folder\\n\\nif ($paging > 0) {\\n\\t$images = array_slice($allImages, $offset, $limit);\\/\\/ Type your code here\\n}\\nelse {\\n\\t$images = $allImages;\\n}\\n\\nif ($rSort > 0) {\\n\\tshuffle($images);\\n}\\n\\n\\/***** CREATE THE IMAGE SECTION FOR OUR PAGE *****\\/\\nforeach ($images as $image) \\/\\/ loop through the images array\\n{\\n\\t$modx->setPlaceholder(\'id\', $id); \\/\\/ set id place-holder for use in template chunk\\n\\t$modx->setPlaceholder(\'count\', $c); \\/\\/ set count place-holder\\n\\t$fPath = $image; \\/\\/ set full path to image\\n\\t$imgFile = basename($fPath); \\/\\/ strip to just image file name\\n\\t$imgName = rtrim($imgFile, \\".\\".substr(strrchr($imgFile, \\".\\"), 1)); \\/\\/ strip extension\\n\\t$path = preg_replace(\'\\/\'. preg_quote($imgFile, \'\\/\') . \'$\\/\', \'\', $fPath); \\/\\/ get path without file name\\t\\n\\t$fold = basename($path); \\/\\/ strip to get image folder\\n\\t$pPath = preg_replace(\'\\/\'. preg_quote($fold, \'\\/\') . \'\\\\\\/$\\/\', \'\', $path); \\/\\/ get path to parent folder \\n\\t$tPath = substr($path, strpos($path, \'\\/\') + 1); \\/\\/get path without root folder\\n\\t$parent = basename($pPath); \\/\\/ strip to get just parent folder\\n\\t$exif_data = exif_read_data ($fPath ,\'IFD0\' ,0 ); \\/\\/ read the exif data from the image\\n\\t$modx->setPlaceholder(\'imgLink\', $fPath); \\/\\/ set imgLink place-holder\\n\\t$modx->setPlaceholder(\'imgName\', $imgName); \\/\\/ set imgName place-holder\\n\\t$modx->setPlaceholder(\'path\', $path); \\/\\/ set path place-holder\\n\\t$modx->setPlaceholder(\'pPath\', $pPath); \\/\\/ set parent path place-holder\\n\\t$modx->setPlaceholder(\'tPath\', $tPath); \\/\\/ set tPath place-holder\\n\\t$modx->setPlaceholder(\'parent\', $parent); \\/\\/ set parent place-holder\\n\\t$modx->setPlaceholder(\'imgFile\', $imgFile); \\/\\/ set imgFile place-holder\\n\\t$modx->setPlaceholder(\'folder\', $fold); \\/\\/ set folder place-holder\\n\\t$modx->setPlaceholder(\'imgCamera\', $exif_data[\'Model\']); \\/\\/ set imgCamera place-holder\\n\\t$modx->setPlaceholder(\'imgDate\', $exif_data[\'DateTime\']); \\/\\/ set imgDate place-holder\\n\\t$fHTML = $modx->getChunk($image_tpl); \\/\\/call the formatting chunk\\n\\t$photos .= $fHTML; \\/\\/ insert completed image sections into a string\\n\\t$c = $c+1; \\/\\/ increment the counter\\t\\n}\\n\\n\\/***** COMPLETE THE PAGE *****\\/\\n$modx->setPlaceholder(\'width\', $width); \\/\\/ set width place-holder\\n$modx->setPlaceholder(\'height\', $height); \\/\\/ set height place-holder\\n$modx->setPlaceholder(\'border\', $border); \\/\\/ set border place-holder\\n$modx->setPlaceholder(\'class\', $class); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'pageClass\', $pageClass); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'infoClass\', $infoClass); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'exifClass\', $exifClass); \\/\\/ set class place-holder\\n$modx->setPlaceholder(\'id\', $id); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'pageId\', $pageId); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'infoId\', $infoId); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'exifId\', $exifId); \\/\\/ set id place-holder\\n$modx->setPlaceholder(\'total\', $tot); \\/\\/ set total place-holder\\n$modx->setPlaceholder(\'photos\', $photos); \\/\\/ set photos place-holder\\n$page = $modx->getChunk($page_tpl); \\/\\/call the formatting chunk and fill with the results\\n\\n\\/***** RETURN COMPLETED PAGE *****\\/\\nreturn $page;"}',
        'guid' => 'df371c0f77468f9da2daf56bd2bbed06',
        'native_key' => 1,
        'signature' => '0d429fe5f3347474b3183479600b9e10',
      ),
      'f4c2bb99f67af4b6f988c2e746a0762f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"monthName","description":"Allows you to name folders 01-12 for sorting but display them by the name of the Month","editor_type":0,"category":0,"cache_type":0,"snippet":"$folder = $modx->getOption(\'mn_Folder\', $scriptProperties, \'\');\\n$type = $modx->getOption(\'mn_Type\', $scriptProperties, \'\');\\n$full_month = array(\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\');\\n$ab_month   = array(\'Jan.\', \'Feb.\', \'Mar.\', \'Apr.\', \'May\', \'Jun.\', \'Jul.\', \'Aug.\', \'Sept.\', \'Oct.\', \'Nov.\', \'Dec.\');\\nif ($type == \'short\') {\\n\\t$ar = $ab_month;\\n} else {\\n\\t$ar = $full_month;\\n}\\n$ab_month_1   = array(\'x01\', \'x02\', \'x03\', \'x04\', \'x05\', \'x06\', \'x07\', \'x08\', \'x09\', \\"x10\\", \'x11\', \'x12\');\\n$output = ltrim(str_replace($ab_month_1, $ar, $folder), \'x\');\\n\\/\\/$output = str_replace($ab_month_1, $ar, $folder);\\necho $output;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"$folder = $modx->getOption(\'mn_Folder\', $scriptProperties, \'\');\\n$type = $modx->getOption(\'mn_Type\', $scriptProperties, \'\');\\n$full_month = array(\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\', \'August\', \'September\', \'October\', \'November\', \'December\');\\n$ab_month   = array(\'Jan.\', \'Feb.\', \'Mar.\', \'Apr.\', \'May\', \'Jun.\', \'Jul.\', \'Aug.\', \'Sept.\', \'Oct.\', \'Nov.\', \'Dec.\');\\nif ($type == \'short\') {\\n\\t$ar = $ab_month;\\n} else {\\n\\t$ar = $full_month;\\n}\\n$ab_month_1   = array(\'x01\', \'x02\', \'x03\', \'x04\', \'x05\', \'x06\', \'x07\', \'x08\', \'x09\', \\"x10\\", \'x11\', \'x12\');\\n$output = ltrim(str_replace($ab_month_1, $ar, $folder), \'x\');\\n\\/\\/$output = str_replace($ab_month_1, $ar, $folder);\\necho $output;"}',
        'guid' => '412f18d4eac9f14982951b858f84a499',
        'native_key' => 2,
        'signature' => '28702cc7699fb00ed5b6a7558c6ed8e4',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'getimages',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"getimages-2.4.3-pl\\/modCategory\\/9d9571aabe4ec6f03317ec386163db87\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"getimages"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '7423d6c4bfd287f2b7a3b3036057c870',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '9d9571aabe4ec6f03317ec386163db87',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"getImages","rank":0}',
);